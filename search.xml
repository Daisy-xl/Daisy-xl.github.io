<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Web前端常见面试题——HTTP</title>
    <url>/2020/04/02/mianshi01/</url>
    <content><![CDATA[<p>一篇用于面试前恶补的小文章，不断补充。</p>
<a id="more"></a>

<h2 id="常见的HTTP方法"><a href="#常见的HTTP方法" class="headerlink" title="常见的HTTP方法"></a>常见的HTTP方法</h2><ul>
<li>GET： 用于请求访问已经被URI识别的资源，可以通过URL传参给服务器</li>
<li>POST： 用于传输信息，提交表单给服务器，主要功能与GET相似，更推荐POST请求</li>
<li>PUT：传输文件，报文主体包含文件内容，保存到对应URI位置</li>
<li>HEAD： 获得报文首部，类似于GET方法，不返回报文主体，一般用于验证URI是否有效</li>
<li>DELETE：删除文件，删除对应URI位置的文件</li>
<li>OPTIONS：查询对应URI支持的HTTP方法</li>
</ul>
<h2 id="HTTP与HTTPS的区别"><a href="#HTTP与HTTPS的区别" class="headerlink" title="HTTP与HTTPS的区别"></a>HTTP与HTTPS的区别</h2><ul>
<li>HTTP 的URL 以http:// 开头，而HTTPS 的URL 以https:// 开头</li>
<li>HTTP是不安全的，HTTPS是安全的</li>
<li>HTTP标准端口是80， HTTPS是443</li>
<li>OSI网罗模型中，HTTP工作于应用层，HTTPS的安全传输机制工作在传输层</li>
<li>HTTP无法加密，HTTPS对传输的数据是加密的</li>
<li>HTTP不需要证书，HTTPS需要SSL证书</li>
</ul>
<h2 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h2><ul>
<li>200 请求正常处理</li>
<li>301 永久重定向</li>
<li>302 临时重定向</li>
<li>401 请求需要认证</li>
<li>403 未授权</li>
<li>404 资源未找到</li>
<li>500 服务器内部错误</li>
<li>503 服务器超过最大负荷</li>
</ul>
<h2 id="一次完整的HTTP事务是怎样一个过程"><a href="#一次完整的HTTP事务是怎样一个过程" class="headerlink" title="一次完整的HTTP事务是怎样一个过程"></a>一次完整的HTTP事务是怎样一个过程</h2><ul>
<li>域名解析</li>
<li>发起TCP三次握手</li>
<li>建立TCP连接后发起HTTP请求</li>
<li>服务器响应HTTP请求，浏览器得到HTML代码</li>
<li>浏览器解析HTML代码，请求代码中的资源</li>
<li>浏览器渲染页面呈现给用户</li>
</ul>
<h2 id="HTTPS工作原理"><a href="#HTTPS工作原理" class="headerlink" title="HTTPS工作原理"></a>HTTPS工作原理</h2><ul>
<li>首先HTTP请求服务端生成证书，客户端对证书的有效性，合法性，域名是否与请求的域名一致，证书的公钥等进行校验。</li>
<li>客户端校验通过后，根据证书的公钥有效性，生成随机数，对公钥随机加密。</li>
<li>消息体产生后，对它的摘要进行MD5算法加密，得到了RSA签名。</li>
<li>发送给服务器，只有服务端可以解密。</li>
<li>解密得到的随机数，再用AES加密，作为秘钥。</li>
</ul>
<h2 id="HTTP优化方案"><a href="#HTTP优化方案" class="headerlink" title="HTTP优化方案"></a>HTTP优化方案</h2><ul>
<li>TCP复用</li>
<li>内容缓存</li>
<li>压缩文本数据，减少带宽</li>
<li>SSL协议加密，在通道内加密并加速</li>
<li>TCP缓冲</li>
</ul>
<h2 id="304缓存的原理"><a href="#304缓存的原理" class="headerlink" title="304缓存的原理"></a>304缓存的原理</h2><ul>
<li>服务器首先产生ETag，服务器可在稍后使用它来判断页面是否已经被修改。本质上，客户端通过将该记号传回服务器要求服务器验证其（客户端）缓存</li>
<li>304是HTTP状态码，服务器用来标识这个文件没修改，不返回内容，浏览器在接收到个状态码后，会使用浏览器已缓存的文件</li>
<li>客户端请求一个页面（A）。 服务器返回页面A，并在给A加上一个ETag。 客户端展现该页面，并将页面连同ETag一起缓存。 客户再次请求页面A，并将上次请求时服务器返回的ETag一起传递给服务器。 服务器检查该ETag，并判断出该页面自上次客户端请求之后还未被修改，直接返回响应304（未修改——Not Modified）和一个空的响应体</li>
</ul>
<h2 id="为什么HTTPS安全"><a href="#为什么HTTPS安全" class="headerlink" title="为什么HTTPS安全"></a>为什么HTTPS安全</h2><p>因为网络请求需要中间有很多的服务器路由器的转发。中间的节点都可能篡改信息，而如果使用HTTPS，密钥在你和终点站才有。https之所以比http安全，是因为他利用ssl/tls协议传输。它包含证书，卸载，流量转发，负载均衡，页面适配，浏览器适配，refer传递等。保障了传输过程的安全性</p>
<h2 id="HTTP2-0"><a href="#HTTP2-0" class="headerlink" title="HTTP2.0"></a>HTTP2.0</h2><ul>
<li>引入了服务端推的概念，允许服务端在客户端请求数据之前主动将数据发送到客户端缓存中，以提高性能</li>
<li>提供更多的加密支持</li>
<li>使用多路技术，允许多个消息在一个连接上同事交差</li>
<li>增加了头部压缩，因此即使非常小的请求，其请求和响应的header都只会占用很少比例的带宽</li>
</ul>
<h2 id="一个页面从输入-URL-到页面加载显示完成，这个过程中都发生了什么"><a href="#一个页面从输入-URL-到页面加载显示完成，这个过程中都发生了什么" class="headerlink" title="一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么"></a>一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么</h2><p>01.浏览器查找域名对应的IP地址(DNS 查询：浏览器缓存-&gt;系统缓存-&gt;路由器缓存-&gt;ISP DNS 缓存-&gt;根域名服务器)</p>
<p>02.浏览器向 Web 服务器发送一个 HTTP 请求（TCP三次握手）</p>
<p>03.服务器 301 重定向（从 <a href="http://example.com" target="_blank" rel="noopener">http://example.com</a> 重定向到 <a href="http://www.example.com）" target="_blank" rel="noopener">http://www.example.com）</a></p>
<p>04.浏览器跟踪重定向地址，请求另一个带 www 的网址</p>
<p>05.服务器处理请求（通过路由读取资源）</p>
<p>06.服务器返回一个 HTTP 响应（报头中把 Content-type 设置为 ‘text/html’）</p>
<p>07.浏览器进 DOM 树构建</p>
<p>08.浏览器发送请求获取嵌在 HTML 中的资源（如图片、音频、视频、CSS、JS等）</p>
<p>09.浏览器显示完成页面</p>
<p>10.浏览器发送异步请求</p>
<h2 id="TCP和UDP的区别"><a href="#TCP和UDP的区别" class="headerlink" title="TCP和UDP的区别"></a>TCP和UDP的区别</h2><ul>
<li>TCP（Transmission Control Protocol，传输控制协议）是基于连接的协议，也就是说，在正式收发数据前，必须和对方建立可靠的连接。一个TCP连接必须要经过三次“对话”才能建立起来</li>
<li>UDP（User Data Protocol，用户数据报协议）是与TCP相对应的协议。它是面向非连接的协议，它不与对方建立连接，而是直接就把数据包发送过去！ UDP适用于一次只传送少量数据、对可靠性要求不高的应用环境</li>
</ul>
<h2 id="说说网络分层里七层模型是哪七层"><a href="#说说网络分层里七层模型是哪七层" class="headerlink" title="说说网络分层里七层模型是哪七层"></a>说说网络分层里七层模型是哪七层</h2><ul>
<li>应用层：允许访问OSI环境的手段</li>
<li>表示层：对数据进行翻译、加密和压缩</li>
<li>会话层：建立、管理和终止会话</li>
<li>传输层：提供端到端的可靠报文传递和错误恢复</li>
<li>网络层：负责数据包从源到宿的传递和网际互连</li>
<li>物理层：通过媒介传输比特,确定机械及电气规范</li>
</ul>
]]></content>
      <categories>
        <category>http</category>
      </categories>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>Web前端常见面试题——HTML/CSS</title>
    <url>/2020/04/02/mianshi02/</url>
    <content><![CDATA[<p>一篇用于面试前恶补的小文章，不断补充。</p>
<h2 id="对HTML语义化的理解"><a href="#对HTML语义化的理解" class="headerlink" title="对HTML语义化的理解"></a>对HTML语义化的理解</h2><ul>
<li>用正确的标签做正确的事情</li>
<li>让页面的结构化，结构更清晰，便于对浏览器、搜索引擎解析</li>
<li>即使没有CSS，页面也可以呈现一种可读的文档格式</li>
<li>搜使用引擎的爬虫也依赖于HTML标记来确定上下文和各个关键字的权重，利于SEO</li>
<li>阅读源码更容易将网站分块，便于阅读理解维护</li>
</ul>
<h2 id="Doctype的作用？标准模式与兼容模式之间的区别？"><a href="#Doctype的作用？标准模式与兼容模式之间的区别？" class="headerlink" title="Doctype的作用？标准模式与兼容模式之间的区别？"></a>Doctype的作用？标准模式与兼容模式之间的区别？</h2><p>告诉浏览器的解析器用什么文档标准解析文档。<br>标准模式的排版和js运作模式都是以该浏览器支持的最高标准运行。<br>兼容模式中，页面以宽松的向后兼容的方式显示，以防老式站点在老式浏览器中无法工作。</p>
<h2 id="盒模型？标准模型？IE模型？"><a href="#盒模型？标准模型？IE模型？" class="headerlink" title="盒模型？标准模型？IE模型？"></a>盒模型？标准模型？IE模型？</h2><p>页面是由若干盒模型堆砌起来的，每个HTML元素都是一个盒模型。<br>由外到内包含外边距 margin 边框 border 内边距 padding 内容 content<br>IE模型的宽高包含content+padding+border</p>
<h2 id="理解BFC？形成条件？"><a href="#理解BFC？形成条件？" class="headerlink" title="理解BFC？形成条件？"></a>理解BFC？形成条件？</h2><p>BFC:块格式化上下文，是一个独立的布局环境，可以理解为一个容器，在这个容器内按照一定的规则进行物品摆放，并且不会影响其他环境中的物品。</p>
<p>BFC的特性：<br>1.是一个独立的容器，容器内子元素不会影响容器外的元素<br>2.BFC区域不会与float的元素区域重叠<br>3.计算BFC高度时，浮动元素也参与计算<br>4.垂直方向上的距离由margin决定<br>5.内部的box会在垂直方向上一个接一个的摆放</p>
<p>形成条件：<br>1.浮动元素 float: left | right | inherit(none除外)<br>2.position: absolte或者fixed定位<br>3.display: inline-block | inline-flex | tebel-cell<br>4.overflow: hidden | auto | scroll</p>
<h2 id="CSS选择器有哪些？哪些属性可以继承？"><a href="#CSS选择器有哪些？哪些属性可以继承？" class="headerlink" title="CSS选择器有哪些？哪些属性可以继承？"></a>CSS选择器有哪些？哪些属性可以继承？</h2><p>id选择器，类选择器，标签选择器，相邻选择器，后代选择器，通配符选择器，属性选择器吗，伪类选择器</p>
<p>可继承的属性：font-size, font-family color ul li dl dt dd<br>不可继承发属性：border, padding,margin,width,height</p>
<h2 id="CSS优先级计算算法"><a href="#CSS优先级计算算法" class="headerlink" title="CSS优先级计算算法"></a>CSS优先级计算算法</h2><p>就近原则，同权重下样式定义最近为准，载入样式以最后载入的定位为准<br>优先级： !important&gt;id&gt;class&gt;tag</p>
<h2 id="伪类与伪元素"><a href="#伪类与伪元素" class="headerlink" title="伪类与伪元素"></a>伪类与伪元素</h2><p>伪类： 用于向某些选择器添加特殊的效果（span:first-child），不互斥可叠加使用<br>伪元素：用于将特殊的想过添加到某些选择器(span:befor)，在一个选择器中只能出现一次，且只能出现在末尾</p>
<h2 id="display值有哪些？"><a href="#display值有哪些？" class="headerlink" title="display值有哪些？"></a>display值有哪些？</h2><p>block node inline-block list-item table inherit</p>
<h2 id="box-sizing常用属性有哪些？"><a href="#box-sizing常用属性有哪些？" class="headerlink" title="box-sizing常用属性有哪些？"></a>box-sizing常用属性有哪些？</h2><p>box-sizing: content-box; // 默认的标准(W3C)盒模型元素效果<br>box-sizing: border-box; // 触发怪异(IE)盒模型元素的效果<br>box-sizing: inherit; // 继承父元素 box-sizing 属性的值</p>
<h2 id="什么是外边距重叠？重叠的结果是什么？"><a href="#什么是外边距重叠？重叠的结果是什么？" class="headerlink" title="什么是外边距重叠？重叠的结果是什么？"></a>什么是外边距重叠？重叠的结果是什么？</h2><p>marigin-collapse<br>相邻的两个盒子（兄弟或父子关系）的外边距可以结合成一个单独的外边距</p>
<p>结果：</p>
<ul>
<li>正正取最大</li>
<li>负负取绝对值最大</li>
<li>正负求和</li>
</ul>
<h2 id="隐藏元素的方法"><a href="#隐藏元素的方法" class="headerlink" title="隐藏元素的方法"></a>隐藏元素的方法</h2><p>display:nonde 元素不可见，且不占用文档空间<br>visibility:hidden 隐藏元素，但依然占用文档空间<br>opacity：0 元素完全透明<br>position: absolute 设置left为一个很大的负值，元素飘出可见区<br>transform: scale(0) 设置元素缩放为无限小，元素不可见，但位置保留</p>
<h2 id="line-height怎么理解？"><a href="#line-height怎么理解？" class="headerlink" title="line-height怎么理解？"></a>line-height怎么理解？</h2><p>是指一行字的高度，包含字间距，实际上是下一行基线到上一行基线的距离。<br>一个容器没有设置高度，那么撑开容器高度的就是line-height<br>line-height设置为height一样可以实现单行文字居中</p>
<h2 id="行内元素有哪些？块级元素有哪些？空元素？"><a href="#行内元素有哪些？块级元素有哪些？空元素？" class="headerlink" title="行内元素有哪些？块级元素有哪些？空元素？"></a>行内元素有哪些？块级元素有哪些？空元素？</h2><p>行内元素：a b span img input select strong<br>块级元素：div ul ol li dl dt dd h1-h6 p<br>空元素： br hr img input link meta</p>
<h2 id="position有哪些值？区别？"><a href="#position有哪些值？区别？" class="headerlink" title="position有哪些值？区别？"></a>position有哪些值？区别？</h2><p>position: 生成绝对定位的元素，相对于值不是static的第一个父元素进行定位<br>relative：生成相对定位的元素，相对于正常位置进行定位<br>fixed：生成绝对定位的元素，相对于浏览器窗口进行定位<br>static：默认值，无定位，元素出现在正常流中</p>
<h2 id="HTML5的新特性"><a href="#HTML5的新特性" class="headerlink" title="HTML5的新特性"></a>HTML5的新特性</h2><ul>
<li>语义化更好的标签 header footer nav section等</li>
<li>用于媒介回放的video和audio</li>
<li>canvas画布</li>
<li>拖放drag</li>
<li>表单控件，calendar，date，time，email，url，search</li>
<li>存储功能：localStorage和sessionStorage</li>
<li>新的技术webworker,websocket,Geolocation</li>
</ul>
<h2 id="SVG与canvas的区别"><a href="#SVG与canvas的区别" class="headerlink" title="SVG与canvas的区别"></a>SVG与canvas的区别</h2><p>SVG 是一种使用 XML 描述 2D 图形的语言<br>Canvas 通过 JavaScript 来绘制 2D 图形<br>SVG 基于 XML，这意味着 SVG DOM 中的每个元素都是可用的，在SVG 中，每个被绘制的图形均被视为对象<br>如果 SVG 对象的属性发生变化，那么浏览器能够自动重现图形<br>Canvas 是逐像素进行渲染的<br>在 canvas 中，一旦图形被绘制完成，它就不会继续得到浏览器的关注<br>如果其位置发生变化，那么整个场景也需要重新绘制，包括任何或许已被图形覆盖的对象</p>
<h2 id="为什么要初始化CSS样式"><a href="#为什么要初始化CSS样式" class="headerlink" title="为什么要初始化CSS样式"></a>为什么要初始化CSS样式</h2><p>浏览器兼容问题，不同浏览器对标签的默认值不同，如果不初始化会出现浏览器之间的页面显示差异，可以使用reset.css等做css初始化</p>
<h2 id="rgba（）和opacity的透明效果有什么不同？"><a href="#rgba（）和opacity的透明效果有什么不同？" class="headerlink" title="rgba（）和opacity的透明效果有什么不同？"></a>rgba（）和opacity的透明效果有什么不同？</h2><p>raba()只作用于元素自身的颜色或背景色，子元素不继承透明效果<br>opacity作用于元素及元素内的所有内容的透明度</p>
<h2 id="cookies-sessionStorage-localStorage的区别"><a href="#cookies-sessionStorage-localStorage的区别" class="headerlink" title="cookies,sessionStorage,localStorage的区别"></a>cookies,sessionStorage,localStorage的区别</h2><ul>
<li>cookies是往往用于存储用户身份信息，加密后存储，数据大小不超过4k，关闭浏览器等不会清除，除非手动清除cookies或者到期</li>
<li>sessionStorage 不发数据给服务器，存储大小比较大，浏览器关闭后自动删除</li>
<li>localStorage 不发数据给服务器，存储大小比较大，存储持久，不主动删除数据不会丢失</li>
</ul>
<h2 id="浏览器是怎么对HTML5的离线储存资源进行管理和加载的？"><a href="#浏览器是怎么对HTML5的离线储存资源进行管理和加载的？" class="headerlink" title="浏览器是怎么对HTML5的离线储存资源进行管理和加载的？"></a>浏览器是怎么对HTML5的离线储存资源进行管理和加载的？</h2><p>1）在线的情况下，浏览器发现 html 标签有 manifest 属性，它会请求 manifest 文件<br>2）如果是第一次访问app，那么浏览器就会根据 manifest 文件的内容下载相应的资源并且进行离线存储<br>3）如果已经访问过app且资源已经离线存储了，浏览器会对比新的 manifest 文件与旧的 manifest 文件，如果文件没有发生改变，就不做任何操作。如果文件改变了，那么就会重新下载文件中的资源并进行离线存储<br>4）离线的情况下，浏览器就直接使用离线存储的资源</p>
<h2 id="页面导入样式时，使用-link-和-import-有什么区别？"><a href="#页面导入样式时，使用-link-和-import-有什么区别？" class="headerlink" title="页面导入样式时，使用 link 和 @import 有什么区别？"></a>页面导入样式时，使用 link 和 @import 有什么区别？</h2><p>link属于html标签，除了加载css之外，可以用于定RSS等，页面加载时会同时加载，无兼容问题<br>@import只用于加载css，等页面加载完才加载，只在IE5以上被识别</p>
<h2 id="清浮动方法"><a href="#清浮动方法" class="headerlink" title="清浮动方法"></a>清浮动方法</h2><ul>
<li>在最后一个浮动元素标签后，新加一个标签，设置clear:both<br>优点：通俗易懂，方便<br>缺点：增加无意义标签，语义化差</li>
<li>父级元素增加overflow:hidden，通过触发BFC清除浮动<br>优点：代码简洁<br>缺点：内容增多的时候容易造成不会自动换行导致内容被隐藏掉，无法显示要溢出的元素</li>
<li>在父元素上使用after伪元素清除浮动（推荐使用）<br>优点：符合闭合浮动思想，结构语义化正确<br>缺点：ie6-7不支持伪元素，需使用zoon:1触发hasLayout</li>
<li>使用before和after双伪元素清除浮动<br>优点：代码更简洁<br>缺点：用zoom:1触发hasLayout</li>
</ul>
<h2 id="什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？"><a href="#什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？" class="headerlink" title="什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？"></a>什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？</h2><p>响应式设计就是网站能够兼容多个终端（包括PC端，手机平板终端），而不是为每个终端做一个特定的版本</p>
<p>基本原理是利用CSS3媒体查询，为不同尺寸的设备适配不同样式<br>对于低版本的IE，可采用JS获取屏幕宽度，然后通过resize方法来实现兼容</p>
<h2 id="水平居中、垂直居中的方法有哪些？"><a href="#水平居中、垂直居中的方法有哪些？" class="headerlink" title="水平居中、垂直居中的方法有哪些？"></a>水平居中、垂直居中的方法有哪些？</h2><h3 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h3><ul>
<li><p>inline-blockzi子元素实现水平居中（父级设置text-align:center）</p>
</li>
<li><p>块级元素可以使用width配合margin:0 auto使用 或者display:table配合margin: 0 auto</p>
</li>
<li><p>绝对定位实现水平居中：父元素相对定位。子元素绝对定位，上下左右都设置为0，overfolow设为auto避免溢出，子元素需要设置宽度，否则被拉伸</p>
</li>
<li><p>flex布局（IE9以下不支持）<br>flex属性是flex-grow（放大比例）, flex-shrink（缩小比例） 和 flex-basis（项目占据主轴空间）的简写，默认值为0 1 auto<br>注意，设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。<br>单个元素水平居中  伸缩容器上 display:flex; justify-content:center;<br>多个元素水平居中 增加width<br>伸缩项目上加 margin: 0 auto</p>
</li>
<li><p>栅格布局grid(IE10以下不支持)<br>容器上设置   display:grid; justify-items:center;<br>或网格项目中设置 justify-self: center 或 margin: 0 auto</p>
</li>
</ul>
<h3 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h3><ul>
<li><p>新增inline-block兄弟元素，设置vertical-align</p>
</li>
<li><p>绝对定位配合transform位移<br>除了可以使用margin-top把div往上偏移之外，CSS3的transform属性也可以实现这个功能，通过设置div的transform: translateY(-50%)，意思是使得div向上平移（translate）自身高度的一半(50%)。</p>
</li>
</ul>
<p>margin: 0 auto; /<em>水平居中</em>/ position: relative;<br>top: 50%; /<em>偏移</em>/ transform: translateY(-50%);</p>
<ul>
<li><p>使用flex弹性盒子布局display:flex<br>display: flex;<br>align-items: center; /<em>定义body的元素垂直居中</em>/<br>justify-content: center; /<em>定义body的里的元素水平居中</em>/</p>
</li>
<li><p>未知高度的块级子元素，采用table-cell + vertical-align<br>父元素设置为display: table，子元素设置成为display: table-cell;vertical-align: middle;</p>
</li>
<li><p>已知高度的块级子元素，采用绝对定位和负边距<br>position: absolute; top: 50%; height: 240px; margin-top: -120px;</p>
</li>
</ul>
<h2 id="你理解的flex弹性盒子布局"><a href="#你理解的flex弹性盒子布局" class="headerlink" title="你理解的flex弹性盒子布局"></a>你理解的flex弹性盒子布局</h2><p>用于不同尺寸屏幕中创建可自动伸缩的布局，任何一个容器都可以指定为flex布局<br>设置里flex布局后，float,clear,vertical-align失效</p>
<p>容器默认存在两根轴：水平主轴和垂直的交叉轴，主轴开始位置叫main start 结束位置叫main end，交叉轴的开始位置叫cross start，结束位置脚cross end。</p>
<p>容器属性：<br>flex-direction: row | row-reverse | column | column-reverse<br>flex-wrap: nowrap | wrap | wrap-reverse<br>flex-flow: direction wrap<br>justify-content: flex-start | flex-end | center | space-between |space-around;<br>align-items: flex-start | flex-end | center | baseline | stretch;<br>align-content: flex-start | flex-end | center | space-between | space-around | stretch;</p>
<p>项目属性:<br>flex-grow: <number>; /* default 0 <em>/ 放大比例<br>flex-shrink: <number>; /</em> default 1 <em>/ 缩小比例<br>flex-basis: <length> | auto; /</em> default auto */ 项目占主轴空间<br>flex: none | [ &lt;’flex-grow’&gt; &lt;’flex-shrink’&gt;? || &lt;’flex-basis’&gt; ] 以上三个的缩写</p>
<h2 id="阐述px与em、rem的区别，以及你知道的其他css单位"><a href="#阐述px与em、rem的区别，以及你知道的其他css单位" class="headerlink" title="阐述px与em、rem的区别，以及你知道的其他css单位"></a>阐述px与em、rem的区别，以及你知道的其他css单位</h2><p>px就是pixel像素的缩写，相对长度单位。常用于PC端的字体单位<br>em相对于当前父元素的font-size（并不是固定的）<br>rem相对于HTML根元素的font</p>
<p>其他css单位：<br>%百分比，一般来说就是相对于父元素<br>vw是相对视口（viewport）的宽度而定的，长度等于视口宽度的1/100<br>vh是相对视口（viewport）的高度而定的，长度等于视口高度的1/100<br>vm css3新单位，相对于视口的宽度或高度中较小的那个</p>
<h3 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h3><p>所谓依赖根元素来计算的方式，就是先给予html元素一个font-size，然后我们所有的rem就根据这个font-size来计算<br>例如：html{ font-size:16px;}<br>那么我们这里的1rem就应该这么来计算：1x16=16px=1rem；浏览器默认为16px可能造成rem计算上的麻烦和多位小数，所以，我们也可以进行这种方式的初始化根元素：</p>
<p>html{<br>   font-size=62.5% //这里就是10/16x100%=62.5% 也就是默认10px的字号<br>}<br>这样初始化之后，我们来进行rem计算的时候，就会减少许多的麻烦。</p>
<h3 id="name-属性的-viewport-值（移动屏幕的缩放）"><a href="#name-属性的-viewport-值（移动屏幕的缩放）" class="headerlink" title="name 属性的 viewport 值（移动屏幕的缩放）"></a>name 属性的 viewport 值（移动屏幕的缩放）</h3><p>也就是可视区域。对于桌面浏览器，我们都很清楚 viewport 是什么，就是除去了所有工具栏、状态栏、滚动条等等之后用于看网页的区域，这是真正有效的区域。由于移动设备屏幕宽度不同于传统 web，因此我们需要改变 viewport 值。</p>
<p>实际上我们可以操作的属性有 4 个：<br>width – // viewport 的宽度 （范围从 200 到 10,000，默认为 980 像素）<br>height – // viewport 的高度 （范围从 223 到 10,000 ）<br>initial-scale – // 初始的缩放比例 （范围从 &gt; 0 到 10）<br>minimum-scale – // 允许用户缩放到的最小比例<br>maximum-scale – // 允许用户缩放到的最大比例<br>user-scalable – // 用户是否可以手动缩放 (no，yes)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0, maximum-scale&#x3D;1.0, user-scalable&#x3D;no&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>

<h3 id="移动设备上如何在不同分辨率下计算出根元素需要的font-size值？"><a href="#移动设备上如何在不同分辨率下计算出根元素需要的font-size值？" class="headerlink" title="移动设备上如何在不同分辨率下计算出根元素需要的font-size值？"></a>移动设备上如何在不同分辨率下计算出根元素需要的font-size值？</h3><h4 id="1-基于css"><a href="#1-基于css" class="headerlink" title="1.基于css"></a>1.基于css</h4><img src="../../../../images/rem01.jpg" width="80%">
可以看出分辨率计算规则：
基准640宽度下屏幕对比比例为1 font-size为20px
320下 font-size 应该设置为才20/640=0.5
那么如何来根据不同分辨率定义font-size呢？当然是媒体查询了
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@media only screen and (min-device-width: 320px)and (-webkit-min-device-pixel-ratio: 2) &#123;</span><br><span class="line">   &#x2F;&#x2F;针对iPhone 4, 5c,5s, 所有iPhone6的放大模式，个别iPhone6的标准模式&lt;br&gt;　　html&#123;&lt;br&gt;　　　　font-size:10px;&lt;br&gt;　　&#125;</span><br><span class="line">&#125;</span><br><span class="line">@media only screen and (min-device-width: 375px)and (-webkit-min-device-pixel-ratio: 2) &#123;</span><br><span class="line">　　&#x2F;&#x2F;针对大多数iPhone6的标准模式&lt;br&gt;　　html&#123;&lt;br&gt;　　　　font-size:12px;&lt;br&gt;　　&#125;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">@media only screen and (min-device-width: 375px)and (-webkit-min-device-pixel-ratio: 3) &#123;</span><br><span class="line">　　&#x2F;&#x2F;针对所有iPhone6+的放大模式&lt;br&gt;　　html&#123;&lt;br&gt;　　　　font-size:16px;&lt;br&gt;　　&#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line">@media only screen and (min-device-width:412px) and (-webkit-min-device-pixel-ratio: 3) &#123;</span><br><span class="line">　　&#x2F;&#x2F;针对所有iPhone6+的标准模式,414px写为412px是由于三星Nexus 6为412px，可一并处理&lt;br&gt;　　html&#123;&lt;br&gt;　　　　font-size:20px;&lt;br&gt;　　&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@media only screen and (-webkit-device-pixel-ratio:.75)&#123; &#x2F;*低分辨率小尺寸的图片样式*&#x2F;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">@media only screen and (-webkit-device-pixel-ratio:1)&#123; &#x2F;*普通分辨率普通尺寸的图片样式*&#x2F;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">@media only screen and (-webkit-device-pixel-ratio:1.5)&#123; &#x2F;*高分辨率大尺寸的图片样式*&#x2F;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-js"><a href="#2-js" class="headerlink" title="2.js"></a>2.js</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docEl.style.fontSize &#x3D; 20 * (clientWidth &#x2F; 320) + &#39;px&#39;;</span><br></pre></td></tr></table></figure>

<p>rem布局需要基于根元素的基准量来做的，不同屏幕分辨率设置不同的基准量，那么对UI的还原度就会很高，但是…发现了一个rem的问题…就是如果页面设计比较看重元素间隔和高度的话…那么用rem布局就会比较难受</p>
<h2 id="实现左边固定宽度，右边自适应（不限于一种方法）"><a href="#实现左边固定宽度，右边自适应（不限于一种方法）" class="headerlink" title="实现左边固定宽度，右边自适应（不限于一种方法）"></a>实现左边固定宽度，右边自适应（不限于一种方法）</h2><p>1）浮动布局（左侧固定宽度并且左浮动，右侧使用margin-left）<br>2）使用定位（左侧固定宽度并且绝对定位，右侧使用margin-left）<br>3）overflow（左侧固定宽并且左浮动，右侧加overflow：hidden）<br>4）flex布局（父级元素设置display:flex，左侧设置固定宽，右侧flex:1）</p>
<h2 id="使用css实现一个持续的动画"><a href="#使用css实现一个持续的动画" class="headerlink" title="使用css实现一个持续的动画"></a>使用css实现一个持续的动画</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.animat&#123;</span><br><span class="line">     width:20px;</span><br><span class="line">     height:20px;</span><br><span class="line">     background:red;</span><br><span class="line">     position:relative;</span><br><span class="line">     animation:mymove 3s infinite;        </span><br><span class="line">&#125;</span><br><span class="line">@keyframes mymove&#123;</span><br><span class="line">     from&#123;left:0px;&#125;</span><br><span class="line">     to&#123;left:200px;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="css实现三角形"><a href="#css实现三角形" class="headerlink" title="css实现三角形"></a>css实现三角形</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.triangle&#123; </span><br><span class="line">     width:0;</span><br><span class="line">     height:0;</span><br><span class="line">     border-width:20px;</span><br><span class="line">     border-style:solid;</span><br><span class="line">     border-color:transparent transparent red transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="移动端开发中有哪些常用的布局？"><a href="#移动端开发中有哪些常用的布局？" class="headerlink" title="移动端开发中有哪些常用的布局？"></a>移动端开发中有哪些常用的布局？</h2><ul>
<li><p>百分比流式布局<br>流动布局与固定宽度布局基本不同点就在于对网站尺寸的测量单位不同，流动布局就是使用百分比来代替px作为单位。<br>优点是流动布局可以很好解决自适应需求。<br>缺点是不够灵活，添加元素时，需要更改其他元素的值</p>
</li>
<li><p>flex布局<br>Flexbox是CSS3引入的新的布局模式，也称为弹性布局，他会根据页面的剩余宽度自动分配空间。 它决定了元素如何在页面上排列，使它们能在不同的屏幕尺寸和设备下可预测地展现出来。它能够扩展和收缩 flex 容器内的元素， 以最大限度地填充可用空间。Flexbox布局最适合应用程序的组件和小规模的布局，而网格布局更适合那些更大规模的布局。</p>
</li>
<li><p>媒体查询+rem布局<br>使用媒体查询可以根据不同的设备宽度加载不同的css样式。rem是一个相对单位，会根据根节点的字体大小来计算的，使用媒体查询和rem可以实现移动端的响应式。</p>
</li>
<li><p>固定宽度做法<br>在标签里把 viewport 加好,然后设想整个网页的宽度为 320px 即可。 其他地方根据 PC 端来布局。<br>缺点:大屏手机显示网页比较宽,固定布局宽度参照永远是 320px,导致左右两 边会有空白。</p>
</li>
<li><p>bootstrap布局<br>bootstrap是一个比较流行的响应式前端框架，利用bootstrap的栅格系统可以实现响应式的移动端布局。栅格系统：Bootstrap中定义了一套响应式的网格系统，其使用方式就是将一个容器划分成12列，然后通过col-xx-xx的类名控制每一列的占比， 在使用的时候，我们给相应的div设置col-lg-2 col-md-3 col-sm-4 col-xs-6，以此完成布局。</p>
</li>
</ul>
<h2 id="什么是圣杯布局和双飞翼布局，并说下实现原理"><a href="#什么是圣杯布局和双飞翼布局，并说下实现原理" class="headerlink" title="什么是圣杯布局和双飞翼布局，并说下实现原理"></a>什么是圣杯布局和双飞翼布局，并说下实现原理</h2><p>两者的功能相同，都是为了实现一个两侧宽度固定，中间宽度自适应的三栏布局。</p>
<h3 id="圣杯"><a href="#圣杯" class="headerlink" title="圣杯"></a>圣杯</h3><img src="../../../../images/cup.jpg" width="80%">
1. header和footer占屏幕全部高度，高度固定
2. 中间的contaier部分是一个三栏布局
3. left和right宽度固定，middle自适应填满整个区域；高度为三栏中最大的高度；
#### 浮动布局(兼容性最好但是略显复杂)
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">        &lt;header&gt;header&lt;&#x2F;header&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;middle&quot;&gt;middle&lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;left&quot;&gt;left&lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;right&quot;&gt;right&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;footer&gt;footer&lt;&#x2F;footer&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>
header和footer就直接定高，width设为100%就好;container也设为100%；left和right定宽；middle宽度100%；让container下的div都向左浮动。
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">header,footer&#123;</span><br><span class="line">    height:100px;</span><br><span class="line">    width:100%; </span><br><span class="line">    background-color: antiquewhite;</span><br><span class="line">&#125;</span><br><span class="line">.container&#123;</span><br><span class="line">    height:200px;</span><br><span class="line">&#125;</span><br><span class="line">.container&gt;div&#123;</span><br><span class="line">    float: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.left&#123;</span><br><span class="line">    width:200px;</span><br><span class="line">    height:200px;</span><br><span class="line">    background-color: burlywood;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.right&#123;</span><br><span class="line">    width:300px;</span><br><span class="line">    height:200px;</span><br><span class="line">    background-color: burlywood;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.middle&#123;</span><br><span class="line">    width:100%;</span><br><span class="line">    height:200px;</span><br><span class="line">    background-color: #b0f9c2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
因为middle先渲染的且宽度为百分百，所以left和right被挤到了下面；为了让他们都在一行显示，让left左外边距向左偏移整行的宽度；让right的左外边距向左偏移right自身的宽度。
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.left&#123;</span><br><span class="line">    ...</span><br><span class="line">     margin-left: -100%;</span><br><span class="line">&#125;</span><br><span class="line">.right&#123;</span><br><span class="line">    ...</span><br><span class="line">    margin-left: -300px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
然而middle里的内容被left覆盖了。。我们需要给container部分设置左右padding，向中间挤压，然后将left和right设置成相对定位，将其固定到正确位置。
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.container&#123;</span><br><span class="line">   ...</span><br><span class="line">    padding-left:200px;</span><br><span class="line">    padding-right:300px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
将div.left和div.right设置相对定位。并给container设置高度，其子级div高度为百分百。
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.container&gt;div&#123;</span><br><span class="line">    ...</span><br><span class="line">    height:100%;</span><br><span class="line">    position: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.left&#123;</span><br><span class="line">    ...</span><br><span class="line">    position:relative;</span><br><span class="line">    left:-200px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.right&#123;</span><br><span class="line">    ...</span><br><span class="line">    position:relative;</span><br><span class="line">    right:-300px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
#### flex布局
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;body&gt;</span><br><span class="line">    &lt;header&gt;header&lt;&#x2F;header&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;left&quot;&gt;left&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;middle&quot;&gt;middle&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;right&quot;&gt;right&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;footer&gt;footer&lt;&#x2F;footer&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>
flex布局非常简单，只需在container中设置flex即可。两边和上面代码一样就不贴了。
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.container&#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: row;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
#### grid布局
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">body&#123;</span><br><span class="line">    display:grid;</span><br><span class="line">&#125;</span><br><span class="line">header&#123;</span><br><span class="line">    grid-row:1;</span><br><span class="line">    grid-column:1&#x2F;5;</span><br><span class="line">    background-color: antiquewhite;</span><br><span class="line">&#125;</span><br><span class="line">footer&#123;</span><br><span class="line">    grid-row:3;</span><br><span class="line">    grid-column:1&#x2F;5;</span><br><span class="line">    background-color: antiquewhite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.left&#123;</span><br><span class="line">    grid-row:2;</span><br><span class="line">    grid-column:1&#x2F;2;</span><br><span class="line">    background-color: burlywood;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.right&#123;</span><br><span class="line">    grid-row:2;</span><br><span class="line">    grid-column:4&#x2F;5;</span><br><span class="line">    background-color: burlywood;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.middle&#123;</span><br><span class="line">    grid-row:2;</span><br><span class="line">    grid-column:2&#x2F;4;</span><br><span class="line">    background-color: #b0f9c2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h3><p>双飞翼布局：对圣杯布局（使用相对定位对以后布局有局限性）的改进，消除相对定位<br>原理：主体元素上设置左右边距，预留两翼位置。左右两栏使用浮动和负边距归位，消除相对定位</p>
<h2 id="align-content与align-items的区别？"><a href="#align-content与align-items的区别？" class="headerlink" title="align-content与align-items的区别？"></a>align-content与align-items的区别？</h2><p>align-content:center对单行是没有效果的<br>而align-items:center不管是对单行还是多行都有效果<br>我们日常开发中用的比较多的就是align-items</p>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>算法题练习记录 （一）</title>
    <url>/2020/03/24/test01/</url>
    <content><![CDATA[<p>力扣算法题练习记录及小结。</p>
<a id="more"></a>

<p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。</p>
<p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>
<p>示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">给定 nums &#x3D; [2, 7, 11, 15], target &#x3D; 9</span><br><span class="line"></span><br><span class="line">因为 nums[0] + nums[1] &#x3D; 2 + 7 &#x3D; 9</span><br><span class="line">所以返回 [0, 1]</span><br></pre></td></tr></table></figure>

<p>解题方案一（最慢暴力for循环）<br>时间复杂度是O(n*(n-1))</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @param &#123;number[]&#125; nums</span><br><span class="line"> * @param &#123;number&#125; target</span><br><span class="line"> * @return &#123;number[]&#125;</span><br><span class="line"> *&#x2F;</span><br><span class="line">var twoSum &#x3D; function(nums, target) &#123;</span><br><span class="line">    let arr &#x3D; nums;</span><br><span class="line">    let arrs &#x3D; new Array()</span><br><span class="line">    for(let i &#x3D;  0; i &lt; arr.length - 1; i++)&#123;</span><br><span class="line">        for(let j &#x3D; i+1; j &lt; arr.length; j++)&#123;</span><br><span class="line">            if ( arr[i] + arr[j] &#x3D;&#x3D;&#x3D; target) &#123;</span><br><span class="line">                arrs.push(i, j)</span><br><span class="line">                return arrs</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>解题方案二（使用Map函数）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var twoSum &#x3D; function(nums, target) &#123;</span><br><span class="line">    let map &#x3D; new Map();</span><br><span class="line">    let arr &#x3D; new Array();</span><br><span class="line">    for(let i in nnums) &#123;</span><br><span class="line">        map.set(nums[i], i)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for(let j &#x3D; 0; j &lt; nums.length - 1; j++) &#123;</span><br><span class="line">        if(map.has(target - nums[j]) &amp;&amp; map.get(target - nums[j] !&#x3D;&#x3D; j) &#123;</span><br><span class="line">            arr.push(map.get(target-nums[j]), j);</span><br><span class="line">            return arr;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解题方案三 （尾递归）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var twoSum &#x3D; function(nums, target, i &#x3D; 0, maps &#x3D; &#123;&#125;) &#123;</span><br><span class="line">    const map &#x3D; maps</span><br><span class="line">    if(map[target - nums[i] ] &gt;&#x3D; 0 ) &#123;</span><br><span class="line">        return [ map[target - nums[i] ], i]</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        map[ nums[i] ] &#x3D; i;</span><br><span class="line">        i++;</span><br><span class="line">        if(i &lt; nums.length - 1)&#123;</span><br><span class="line">            return twoSum(nums, target, i, map)</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            return [ map[target - nums[i] ], i]</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>图解HTTP</title>
    <url>/2020/03/23/http/</url>
    <content><![CDATA[<p>深入浅出《图解HTTP》</p>
<a id="more"></a>

<h1 id="HTTP和网络基础"><a href="#HTTP和网络基础" class="headerlink" title="HTTP和网络基础"></a>HTTP和网络基础</h1><p>HTTP，超文本传输协议，Web是建立在HTTP协议上通信的。是TCP/IP协议的子集。</p>
<p>TCP/IP协议是互联网协议的合集，最重要的一点就是分层：应用层、传输层、网络层和数据链路层。</p>
<p>分层协议的好处是，如果某个地方改变设计，只需要把变动的层替换掉即可。</p>
<ul>
<li>应用层： 决定了向用户提供应用服务时通信的活动。</li>
<li>传输层： 提供处于网络连接中的两台计算机之间的数据传输。</li>
<li>网络层： 处理在网络上流动的数据包。</li>
<li>链路层： 处理链接网络的硬件部分。</li>
</ul>
<img src="../../../../images/tcpip.jpg" width="80%">
发送端从应用层往下走，接收端则往应用层往上走。]]></content>
      <categories>
        <category>http</category>
      </categories>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
</search>
